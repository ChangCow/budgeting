<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Graph</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container container-graph">
        <nav class="main-nav">
            <a href="/">Home</a>
            <a href="/expenses">Expenses</a>
            <a href="/income">Income</a>
            <a href="/graph">Graph</a>
        </nav>
        <main class="main-content">
            <h1>Disposable Income Flow</h1>
            <canvas id="disposableIncomeChart"></canvas>
            <form action="/graph" method="GET">
                <input type="date" name="startDate">
                <input type="date" name="endDate">
                <button type="submit">Update Range</button>
            </form>
            <form action="/adjust-balance" method="POST" class="expense-form" style="margin-top: 1rem;">
                <input type="date" name="date" required>
                <input type="number" name="amount" placeholder="Set Correct Balance" step="0.01" required>
                <button type="submit">Adjust Balance</button>
            </form>
        </main>
    </div>
    <script>
    const ctx = document.getElementById('disposableIncomeChart').getContext('2d');
    const chartData = <%- JSON.stringify(chartData) %>;
    const dailyNetChanges = chartData.dailyNetChanges;

    new Chart(ctx, {
        type: 'line',
        data: {
            labels: chartData.labels,
            datasets: [{
                label: 'Financial Event',
                data: chartData.data,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1
            }]
        },
        options: {
            plugins: {
                tooltip: {
                    callbacks: {
                        title: function(tooltipItem) {
                            return tooltipItem[0].label;
                        },
                        label: function(tooltipItem) {
                            const date = tooltipItem.label;
                            const netChange = dailyNetChanges[date];

                            if (netChange > 0) {
                                return `Income: $${netChange.toFixed(2)}`;
                            } else if (netChange < 0) {
                                return `Expense: $${(-netChange).toFixed(2)}`;
                            }
                            return null;
                        }
                    }
                }
            }
        }
    });
</script>
</body>
</html>